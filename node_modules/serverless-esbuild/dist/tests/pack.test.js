"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pack_1 = require("../pack");
const utils = require("../utils");
const fs = require("fs-extra");
const globby = require("globby");
const utils_1 = require("ts-jest/utils");
jest.mock('globby');
jest.mock('fs-extra');
const mockCli = {
    log: jest.fn(),
};
describe('filterFilesForZipPackage', () => {
    it('should filter out files for another zip package', () => {
        expect((0, pack_1.filterFilesForZipPackage)({
            files: [
                {
                    localPath: '__only_service-otherFnName/bin/imagemagick/include/ImageMagick/magick/method-attribute.h',
                    rootPath: '/home/capaj/repos/google/search/.esbuild/.build/__only_service-otherFnName/bin/imagemagick/include/ImageMagick/magick/method-attribute.h',
                },
                {
                    localPath: '__only_fnAlias/bin/imagemagick/include/ImageMagick/magick/method-attribute.h',
                    rootPath: '/home/capaj/repos/google/search/.esbuild/.build/__only_fnAlias/bin/imagemagick/include/ImageMagick/magick/method-attribute.h',
                },
            ],
            depWhiteList: [],
            functionAlias: 'fnAlias',
            isGoogleProvider: false,
            hasExternals: false,
            includedFiles: [],
            excludedFiles: [],
        })).toMatchInlineSnapshot(`
      Array [
        Object {
          "localPath": "__only_fnAlias/bin/imagemagick/include/ImageMagick/magick/method-attribute.h",
          "rootPath": "/home/capaj/repos/google/search/.esbuild/.build/__only_fnAlias/bin/imagemagick/include/ImageMagick/magick/method-attribute.h",
        },
      ]
    `);
    });
});
describe('pack', () => {
    afterEach(() => {
        jest.resetAllMocks();
    });
    describe('individually', () => {
        it('should create zips with the functionAlias as the name', () => __awaiter(void 0, void 0, void 0, function* () {
            const zipSpy = jest.spyOn(utils, 'zip').mockResolvedValue();
            (0, utils_1.mocked)(globby, true).sync.mockReturnValue(['hello1.js', 'hello2.js']);
            (0, utils_1.mocked)(globby).mockResolvedValue([]);
            (0, utils_1.mocked)(fs).statSync.mockReturnValue({ size: 123 });
            const buildResults = [
                {
                    result: { errors: [], warnings: [] },
                    bundlePath: 'hello1.js',
                    func: {
                        handler: 'hello1.handler',
                        events: [{ http: { path: 'hello', method: 'get' } }],
                        name: 'serverless-example-dev-hello1',
                        package: { patterns: [] },
                    },
                    functionAlias: 'hello1',
                },
                {
                    result: { errors: [], warnings: [] },
                    bundlePath: 'hello2.js',
                    func: {
                        handler: 'hello2.handler',
                        events: [{ http: { path: 'hello', method: 'get' } }],
                        name: 'serverless-example-dev-hello2',
                        package: { patterns: [] },
                    },
                    functionAlias: 'hello2',
                },
            ];
            const esbuildPlugin = {
                serverless: {
                    service: {
                        package: {
                            individually: true,
                        },
                    },
                    cli: mockCli,
                    getVersion: jest.fn().mockReturnValue('1.19.0'),
                },
                buildOptions: {
                    packager: 'yarn',
                    exclude: ['aws-sdk'],
                    external: [],
                    nativeZip: false,
                },
                buildDirPath: '/workdir/serverless-esbuild/examples/individually/.esbuild/.build',
                workDirPath: '/workdir/serverless-esbuild/examples/individually/.esbuild/',
                serviceDirPath: '/workdir/serverless-esbuild/examples/individually',
                buildResults,
            };
            yield pack_1.pack.call(esbuildPlugin);
            expect(zipSpy).toBeCalledWith('/workdir/serverless-esbuild/examples/individually/.esbuild/.serverless/hello1.zip', expect.any(Array), expect.any(Boolean));
            expect(zipSpy).toBeCalledWith('/workdir/serverless-esbuild/examples/individually/.esbuild/.serverless/hello2.zip', expect.any(Array), expect.any(Boolean));
        }));
    });
});
