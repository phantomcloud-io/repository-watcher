"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const npm_1 = require("../../packagers/npm");
const path = require("path");
const mockSpawn = require("mock-spawn");
describe('test NPM class', () => {
    let spawnSpy = mockSpawn();
    beforeEach(() => {
        spawnSpy = mockSpawn();
        require('child_process').spawn = spawnSpy;
    });
    it('should properly get the dependencies list', () => __awaiter(void 0, void 0, void 0, function* () {
        spawnSpy.sequence.add(spawnSpy.simple(0, '6.0.0'));
        spawnSpy.sequence.add(spawnSpy.simple(0, '{"dependencies":{}}'));
        const npm = new npm_1.NPM();
        const dependencies = yield npm.getProdDependencies(path.join('./'));
        expect(spawnSpy.calls.length).toStrictEqual(2);
        expect(spawnSpy.calls[0].args).toStrictEqual(['--version']);
        expect(spawnSpy.calls[1].args).toStrictEqual(['ls', '-json', '-prod']);
        expect(dependencies).toStrictEqual({ 'dependencies': {} });
    }));
    it('should properly get the dependencies list w/ depth', () => __awaiter(void 0, void 0, void 0, function* () {
        spawnSpy.sequence.add(spawnSpy.simple(0, '{"dependencies":{}}'));
        const npm = new npm_1.NPM();
        const dependencies = yield npm.getProdDependencies(path.join('./'), 2);
        expect(spawnSpy.calls.length).toStrictEqual(1);
        expect(spawnSpy.calls[0].args).toStrictEqual(['ls', '-json', '-prod', '-depth=2']);
        expect(dependencies).toStrictEqual({ 'dependencies': {} });
    }));
    it('should properly get the dependencies list (npm version >= 7)', () => __awaiter(void 0, void 0, void 0, function* () {
        spawnSpy.sequence.add(spawnSpy.simple(0, '7.0.0'));
        spawnSpy.sequence.add(spawnSpy.simple(0, '{"dependencies":{}}'));
        const npm = new npm_1.NPM();
        const dependencies = yield npm.getProdDependencies(path.join('./'));
        expect(spawnSpy.calls.length).toStrictEqual(2);
        expect(spawnSpy.calls[0].args).toStrictEqual(['--version']);
        expect(spawnSpy.calls[1].args).toStrictEqual(['ls', '-json', '-prod', '-all']);
        expect(dependencies).toStrictEqual({ 'dependencies': {} });
    }));
    it('should properly get the dependencies list w/ depth (npm version >= 7)', () => __awaiter(void 0, void 0, void 0, function* () {
        spawnSpy.sequence.add(spawnSpy.simple(0, '{"dependencies":{}}'));
        const npm = new npm_1.NPM();
        const dependencies = yield npm.getProdDependencies(path.join('./'), 2);
        expect(spawnSpy.calls.length).toStrictEqual(1);
        expect(spawnSpy.calls[0].args).toStrictEqual(['ls', '-json', '-prod', '-depth=2']);
        expect(dependencies).toStrictEqual({ 'dependencies': {} });
    }));
});
